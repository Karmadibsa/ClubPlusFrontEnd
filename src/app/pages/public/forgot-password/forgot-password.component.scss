// Utilisation de :host pour encapsuler les styles dans ce composant
// même s'ils imitent des styles globaux.
.contenu{
  padding: 10%;
}

/* --- Styles recréés ici car hors de .user-layout-container --- */
/* Utilisation exclusive des variables :root */

/* --- Core Page Layout (similaire à celui dans user-layout) --- */
.page-header {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-lg);
  padding-bottom: var(--spacing-md);
  border-bottom: 1px solid var(--border-color);
  gap: var(--spacing-md);
}

.page-title {
  font-size: 1.8rem; // ou utiliser une variable si définie
  color: var(--main-blue);
  margin: 0;
  display: inline-flex;
  align-items: center;
  gap: var(--spacing-sm);
  flex-shrink: 0;
  font-weight: 600; // Assurez-vous que le poids est défini
}

.main-section {
  margin-bottom: var(--spacing-lg);
}

/* --- Styles Formulaires (similaire à celui dans user-layout) --- */
fieldset.card-section {
  border: none;
  padding: 0;
  margin: 0;
  background-color: var(--main-white);
  border-radius: var(--border-radius);
  // box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05)); // Utiliser une variable de shadow si elle existe, sinon valeur par défaut
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); // Fallback si --shadow-sm n'est pas global
  overflow: hidden;
  border-top: 3px solid var(--main-blue);
  margin-bottom: var(--spacing-lg);
}

legend.section-header {
  width: 100%;
  padding: var(--spacing-md);
  // background-color: rgba(var(--main-blue-rgb, 26, 95, 122), 0.05); // Utiliser variable RGB si définie globalement
  background-color: rgba(26, 95, 122, 0.05); // Fallback
  border-bottom: 1px solid var(--border-color); // Utiliser --border-color-light si défini
  float: none; // important
  margin-bottom: 0; // important

  h2 {
    color: var(--main-blue);
    font-size: 1.2rem;
    margin: 0 0 4px 0;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    font-weight: 600;
  }

  .section-description {
    color: var(--text-dark);
    font-size: 0.9rem;
    margin: 0;
  }
}

.card-content {
  padding: var(--spacing-lg);
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.form-group {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  flex-shrink: 1;
  min-width: 0;
}

label {
  margin-bottom: var(--spacing-xs);
  font-weight: 500;
  color: var(--text-dark);
}

.required-indicator {
  color: var(--danger);
  margin-left: 2px;
}

// Cibler .form-control directement, ou les inputs spécifiques si .form-control n'est pas global
.form-control {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius-sm, 4px); // Utiliser variable avec fallback
  font-size: 1rem;
  line-height: 1.5;
  transition: border-color 0.2s ease, box-shadow 0.2s ease; // Utiliser --transition-standard
  background-color: var(--main-white);
  font-family: inherit; // Hérite de la police du body/root

  &:focus {
    outline: none;
    border-color: var(--main-orange);
    // box-shadow: 0 0 0 3px rgba(var(--main-orange-rgb, 255, 107, 53), 0.3); // Utiliser variable RGB si définie
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.3); // Fallback
  }

  &.is-invalid {
    border-color: var(--danger);
    &:focus {
      // box-shadow: 0 0 0 3px rgba(var(--danger-rgb, 220, 53, 69), 0.25); // Utiliser variable RGB danger si définie
      box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.25); // Fallback
    }
  }

  &:disabled {
    background-color: var(--bg-medium-gray);
    cursor: not-allowed;
  }
}

// Cibler les messages d'erreur directement
.invalid-feedback {
  display: none; // Sera affiché via *ngIf dans le HTML
  color: var(--danger);
  font-size: 0.85rem;
  margin-top: var(--spacing-xs);
}
// La logique d'affichage est gérée par [class.is-invalid] et *ngIf en Angular
// Donc pas besoin de input.is-invalid ~ .invalid-feedback ici.

.form-actions {
  margin-top: var(--spacing-md);
  padding: var(--spacing-lg);
  border-top: 1px solid var(--border-color); // Utiliser --border-color-light si défini
  display: flex;
  justify-content: center;
  gap: var(--spacing-md);
}

/* --- Styles Boutons (similaire à celui dans user-layout) --- */
.btn {
  padding: 10px 20px;
  border-radius: var(--border-radius);
  font-size: 0.95rem;
  cursor: pointer;
  font-weight: 600;
  border: 1px solid transparent;
  transition: var(--transition-standard);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
  text-decoration: none;
  line-height: 1.5;
  white-space: nowrap;
  font-family: inherit; // Hérite de la police

  // Style des icônes dans les boutons (utilise la définition globale de [data-lucide])
  [data-lucide] {
    width: 18px; // Ou var(--icon-size-sm) si défini
    height: 18px;
    flex-shrink: 0;
    // vertical-align: middle; // Déjà dans la règle globale [data-lucide] ?
  }

  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
    box-shadow: none;
    transform: none;
  }

  &:focus-visible {
    outline: none;
    // box-shadow: 0 0 0 3px rgba(var(--main-orange-rgb, 255, 107, 53), 0.4); // Utiliser variable RGB
    box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.4); // Fallback
  }
  &:hover:not(:disabled) {
    transform: translateY(-1px); // Effet de survol simple
  }
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

.btn-primary {
  background-color: var(--main-orange);
  color: var(--main-white);
  border-color: var(--main-orange);
  // box-shadow: 0 2px 4px rgba(var(--main-orange-rgb, 255, 107, 53), 0.2); // Utiliser variable RGB
  box-shadow: 0 2px 4px rgba(255, 107, 53, 0.2); // Fallback

  &:hover:not(:disabled) {
    background-color: var(--main-orange-dark);
    border-color: var(--main-orange-dark);
    // box-shadow: 0 4px 8px rgba(var(--main-orange-rgb, 255, 107, 53), 0.25); // Utiliser variable RGB
    box-shadow: 0 4px 8px rgba(255, 107, 53, 0.25); // Fallback
  }
}

/* --- Styles Alertes (similaire à celui dans user-layout) --- */
.alert {
  padding: var(--spacing-md);
  margin-bottom: var(--spacing-md);
  border: 1px solid transparent;
  border-radius: var(--border-radius-sm, 4px); // Variable avec fallback
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.alert-danger {
  // Utiliser les variables --danger-dark etc. si elles sont DÉFINIES dans :root
  color: var(--danger-dark, #721c24); // Variable avec fallback
  background-color: #f8d7da; // Ou utiliser une variable --danger-bg si définie
  border-color: #f5c6cb; // Ou utiliser une variable --danger-border si définie
}

.alert-success {
  // Utiliser les variables --success-dark etc. si elles sont DÉFINIES dans :root
  color: var(--success-dark, #155724); // Variable avec fallback
  background-color: #d4edda; // Ou utiliser une variable --success-bg si définie
  border-color: #c3e6cb; // Ou utiliser une variable --success-border si définie
}

/* --- Style pour le spinner (utilise la définition globale .animate-spin) --- */
// .animate-spin [data-lucide="loader-circle"] { ... } est déjà global

/* --- Style pour le lien de retour (optionnel) --- */
.auth-link {
  text-align: center;
  margin-top: var(--spacing-lg);

  a {
    color: var(--main-blue);
    text-decoration: none;
    font-weight: 500;
    &:hover {
      color: var(--main-blue-dark);
      text-decoration: underline;
    }
  }
}

/* --- Utilitaires (supposés globaux) --- */
/* .visually-hidden est global */
/* .animate-spin est global */

/* --- Responsive (si nécessaire, adapter depuis les styles globaux) --- */
@media screen and (max-width: 768px) {
  :host {
    padding: var(--spacing-md); // Moins de padding sur mobile
  }
  .page-header .page-title {
    font-size: 1.5rem;
  }
  .form-actions {
    flex-direction: column;
    align-items: stretch;
    gap: var(--spacing-sm);
  }
}
